// Script automatically produced by Collect Earth for the plot that has been clicked on Google Earht. See bottom of the script for more info on customization.
// This script will show graphs of NDVI, EVI and NDWI mean-values for the pixels contained within the plot.

// The date that is used as the start of the chart ( if the dataset is available )
// You can change the start date manually and hit the button "Run""again to reload the charts using the different time series
var startTime = '2000-01-01';

// The last date for which the chart is generated. Should be today's date
var endTime = '${todayDate}';

// x The polygon that describes the plot.
var plot = ee.Geometry.Polygon([
// The placemark variable has an array called shape that contains the locations of the corners of the polygon
<#list placemark.shape as coord>[${coord.longitude}, ${coord.latitude}],</#list>]);

// Load the Landsat 8 - 32 Day Normalized Difference Vegetation Index composite. This is only available from 2013 onwards. Select the NDVI band. Resolution of the pixels is 30 meters.
var landsat8Ndvi32Day = ee.ImageCollection('LANDSAT/LC8_L1T_32DAY_NDVI').filterDate(startTime, endTime).select('NDVI');

// Generate the chart of the NDVI values through the time series. Use the mean of the NDVI value of the pixels that fall within the plot.
var ndviTimeSeries = Chart.image.series(landsat8Ndvi32Day, plot, ee.Reducer.mean(), 30);
ndviTimeSeries = ndviTimeSeries.setOptions({title: 'Landsat 8 32 days NDVI', hAxis: {title: 'Date' },vAxis: { title: 'NDVI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 1,
          min: -0.25,
        },
        gridlines: {
          count: 5,
        }}});

// Show the NDVI chart on the console
print(ndviTimeSeries);

// Load the Landsat 8 - 32 Day Normalized Difference Wetness Index composite. This is only available from 2013 onwards. Select the NDWI band. Resolution of the pixels is 30 meters.
var landsat8Ndwi32Day = ee.ImageCollection('LANDSAT/LC8_L1T_32DAY_NDWI').filterDate(startTime, endTime).select('NDWI');

// Generate the chart of the NDWI values through the time series. Use the mean of the NDWI value of the pixels that fall within the plot.
var ndwiTimeSeries = Chart.image.series(landsat8Ndwi32Day, plot, ee.Reducer.mean(), 30);
ndwiTimeSeries = ndwiTimeSeries.setOptions({title: 'Landsat 8 32 days NDWI', hAxis: {title: 'Date' }, vAxis: { title: 'NDWI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 1,
          min: -0.25,
        },
        gridlines: {
          count: 5,
        }}});

//Show the NDWI chart on the console 
print(ndwiTimeSeries);

// Load the Landsat 8 - 32 Day Enhanced Vegetation Index composite. This is only available from 2013 onwards. Select the EVI band. Resolution of the pixels is 30 meters.
var landsat8Evi32Day = ee.ImageCollection('LANDSAT/LC8_L1T_32DAY_EVI').filterDate(startTime, endTime).select('EVI');

// Generate the chart of the EVI values though the time series. Use the mean of the EVI value of the pixels that fall within the plot.
var eviTimeSeries =  Chart.image.series(landsat8Evi32Day, plot, ee.Reducer.mean(), 30);
eviTimeSeries = eviTimeSeries.setOptions({title: 'Landsat 8 32 days EVI', hAxis: {title: 'Date'}, vAxis: {title: 'EVI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 1,
          min: -0.25,
        },
        gridlines: {
          count: 5,
        }}});

//Show the EVI chart on the console
print(eviTimeSeries);

// Load the MODIS  Vegetation Index composite. Select the NDVI band. Resolution of the pixels is 250 meters.
var modisNoaaNdvi = ee.ImageCollection('MODIS/MOD13Q1').filterDate(startTime, endTime).select('NDVI');

var modisNoaaTimeSeries = Chart.image.series(modisNoaaNdvi, plot, ee.Reducer.mean(), 30);
modisNoaaTimeSeries = modisNoaaTimeSeries.setOptions({  title: 'MOD13Q1 Vegetation Indices 16-Day Global 250m',hAxis:{title: 'Date'},vAxis: {title: 'NDVI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 10000,
          min: -2500,
        },
        gridlines: {
          count: 5,
        }}});

// Show the MODIS NDVI chart on the console
print(modisNoaaTimeSeries);

var modisGoogleNdvi = ee.ImageCollection('MODIS/MCD43A4_NDVI').filterDate(startTime, endTime).select('NDVI');

var modisGoogleTimeSeries = Chart.image.series(modisGoogleNdvi, plot, ee.Reducer.mean(), 30);

modisGoogleTimeSeries = modisGoogleTimeSeries.setOptions({title: 'MODIS 16-Day NDVI (Google)',hAxis: {title: 'Date'},vAxis: {title: 'NDVI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 1,
          min: -0.25,
        },
        gridlines: {
          count: 5,
        }}});

print(modisGoogleTimeSeries);

var landsat7MonthlyNdvi = ee.ImageCollection('LANDSAT/LE7_L1T_32DAY_NDVI').filterDate(startTime, endTime).select('NDVI');

var landsat7MonthlyTimeSeries = Chart.image.series(landsat7MonthlyNdvi, plot, ee.Reducer.mean(), 30);

landsat7MonthlyTimeSeries = landsat7MonthlyTimeSeries.setOptions({
title: 'Landsat 7 Monthly NDVI Composite',hAxis: {title: 'Month'},vAxis: {title: 'NDVI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 1,
          min: -0.25,
        },
        gridlines: {
          count: 5,
        }}});

print(landsat7MonthlyTimeSeries);

// Landsat 5 was active from 1984 onwards but not all areas of the world are cover every year ( or even at all)
// The last graphic is going to be a tools to help the operator to find Landsat 5 imagery.
// If the scater-plot shows no results for one year it means that there is no single image for the plot area during a whole year.

// Load the Landsat 5 NDVI Annual composite from 1984 onwards. This composite is not realistic as the annual NDVI value consists of only the first NDVI value of the year and not an average.
var landsat5AnnualNdvi = ee.ImageCollection('LANDSAT/LT5_L1T_ANNUAL_NDVI').filterDate("1984-1-1", endTime).select('NDVI');

// Generate the chart of the NDVI values through time.
var landsat5AnnualTimeSeries = Chart.image.series(landsat5AnnualNdvi, plot, ee.Reducer.mean(), 30);
landsat5AnnualTimeSeries = landsat5AnnualTimeSeries.setOptions({ title: 'Presence of Landsat 5 Annual imagery', hAxis: {title: 'Month'},  vAxis: {title: 'NDVI',viewWindowMode: 'explicit',
        viewWindow: {
          max: 1,
          min: -0.25,
        },
        gridlines: {
          count: 5,
        }}});

// Set the chart as scatter type. Only interest is to see if there is an available image for one year to avoid looking for images blindly.
landsat5AnnualTimeSeries = landsat5AnnualTimeSeries.setChartType('ScatterChart');

// Show the Landsa 5 scatter plot on the console.
print(landsat5AnnualTimeSeries);



// Center the map on the plot location (actually the top-left corner of the plot ) and set Zoom level to 15
Map.setCenter(${placemark.shape[0].longitude}, ${placemark.shape[0].latitude}, 15);

// Add Pan Sharpened Landsat images derived from the best available Landsat images yearly
addPanSharpen( 2000 );
addPanSharpen( 2001 );
addPanSharpen( 2002 );
addPanSharpen( 2003 );
addPanSharpen( 2004 );
addPanSharpen( 2005 );
addPanSharpen( 2006 );
addPanSharpen( 2007 );
addPanSharpen( 2008 );
addPanSharpen( 2009 );
addPanSharpen( 2010 );
addPanSharpen( 2011 );
addPanSharpen( 2012 );
addPanSharpen( 2013 );
addPanSharpen( 2014 );
addPanSharpen( 2015 );
			 
// Add the plot polygon to the map
Map.addLayer(plot, {}, "Plot");

function addPanSharpen( year ){
	// Default use Landsat 8 values
	var collection = 'LANDSAT/LC8_L1T_TOA'; 
	var bands_to_sharpen = ['B5', 'B6', 'B4'];
    var bands_cloud_score =	['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8','B10', 'B11'];
	var satellite = "Landsat 8";
	
	if( year < 2014 ){
		collection = 'LANDSAT/LE7_L1T_TOA' ; 
		bands_to_sharpen = ['B4', 'B5', 'B3'];
		bands_cloud_score =	['B1', 'B2', 'B3', 'B4', 'B5', 'B6_VCID_1' , 'B6_VCID_2' , 'B7', 'B8'];
		satellite = "Landsat 7";
	}

	var sharpenedLandsat = panSharpen(collection , bands_to_sharpen, bands_cloud_score, year + '-01-01', year + '-12-31');
	
	Map.addLayer(sharpenedLandsat,
             {min: getMinValue(sharpenedLandsat), max: getMaxValue(sharpenedLandsat), gamma: [1.3, 1.3, 1.3]},
             year + ' ' + satellite + ' pan-sharpened',false);
}

function panSharpen(landsatCollectionName, bandsToSharpen, bandsCloudScore, startPeriod, endPeriod ){

	var bandNames = ee.List(bandsCloudScore);
	// Load a Landsat collection.
	var collection = ee.ImageCollection( landsatCollectionName )
	// Select the bands of interest to avoid taking up memory.
	.select(bandsCloudScore)
	// Filter to get only imagery at a point of interest.
	.filterBounds(plot)
	// Filter to get only six months of data.
	.filterDate( startPeriod , endPeriod )
	// Mask clouds by mapping the cloudMask function over the collection.
	// This will add a cloud score band called 'cloud' to every image.
	.map(function(image) {
		return ee.Algorithms.Landsat.simpleCloudScore(image);
	});

	// Convert the collection to an array.
	var array = collection.toArray();

	// Label of the axes.
	var imageAxis = 0;
	var bandAxis = 1;

	// Get the cloud slice and the bands of interest.
	var bands = array.arraySlice(bandAxis, 0, bandsCloudScore.length);
	var clouds = array.arraySlice(bandAxis, bandsCloudScore.length);

	// Sort by cloudiness.
	var sorted = bands.arraySort(clouds);

	// Get the least cloudy images, 20% of the total.
	var numImages = sorted.arrayLength(imageAxis).multiply(0.2).int();
	var leastCloudy = sorted.arraySlice(imageAxis, 0, numImages);

	// Get the mean of the least cloudy images by reducing along the image axis.
	var mean = leastCloudy.arrayReduce({
	reducer: ee.Reducer.mean(),
	axes: [imageAxis]
	});

	// Turn the reduced array image into a multi-band image for display.
	var meanImage = mean.arrayProject([bandAxis]).arrayFlatten([bandNames]);


	// Convert the RGB bands to the HSV color space.
	var hsv = meanImage.select( bandsToSharpen ).rgbToHsv();

	// Swap in the panchromatic band and convert back to RGB.
	var sharpened = ee.Image.cat([
	hsv.select('hue'), hsv.select('saturation'), meanImage.select('B8')
	]).hsvToRgb();

	return sharpened;
}

function getMinValue(image){
	var min = image.reduceRegion({
		'reducer': ee.Reducer.min(),
		'geometry': ee.Geometry( Map.getBounds(true) ),
		'bestEffort': true,
		'scale': 30
	});
	
	var objects = min.getInfo();
	var value = 10000;
	for(var key in objects){
		var attrValue = objects[key];
		if ( attrValue < value){
			value = attrValue;
		}
	}
	
	return value;
  
}

function getMaxValue(image){
	var max = image.reduceRegion({
		'reducer': ee.Reducer.max(),
		'geometry': ee.Geometry( Map.getBounds(true) ),
		'bestEffort': true,
		'scale': 30
	});
	
	var objects = max.getInfo();
	var value = -10000;
	for(var key in objects){
		var attrValue = objects[key];
		if ( attrValue > value){
			value = attrValue;
		}
	}
	
	return value;
  
}

// This is an automatically generated script. 
// If you want to Collect Earth to run a different script for your project when a user clicks on a plot on Google Earth follow these steps :
// 1. Copy the contents of this file : https://raw.githubusercontent.com/openforis/collect-earth/master/collect-earth/collect-earth-app/resources/eePlaygroundScript.fmt
// 2. Modify the script as you please but keep the lines where the plot variable has been defined using Freemarker tamplate variables
// 3. Save the script as "eePlaygroundScript.fmt" inside the root folder of your CEP project file